{"version":3,"sources":["components/ItemCard/index.tsx","components/Filters/MultiselectFilter/index.tsx","components/Filters/SliderFilter/index.tsx","constants.ts","components/Filters/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ItemCard","runeword","name","level","items","runes","stats","Card","variant","sx","bgcolor","alpha","textAlignLast","CardContent","Typography","color","join","List","dense","map","stat","statIndex","valueMin","valueMax","percent","modifier","spell","spellLevel","spellCharges","skill","skillLevelMin","skillLevelMax","skillBoost","skillBoostValueMin","skillBoostValueMax","note","statString","ListItem","padding","ListItemText","marginTop","marginBottom","style","fontWeight","Math","random","MultiselectFilter","selected","selectedSetter","label","choices","theme","useTheme","filterID","toLowerCase","replace","FormControl","m","fullWidth","InputLabel","id","backgroundColor","palette","secondary","main","Select","labelId","multiple","value","onChange","target","split","renderValue","choice","MenuItem","Checkbox","checked","includes","primary","SliderFilter","range","useState","setValue","min","max","Box","Slider","getAriaLabel","event","newValue","Array","isArray","onChangeCommitted","valueLabelDisplay","getAriaValueText","currentValue","ITEM_CATEGORIES","RUNES_AVAILABLE","Filters","selectedItemCategories","setSelectedItemCategories","selectedRunesAvailable","setSelectedRunesAvailable","selectedLevelRange","setSelectedLevelRange","Paper","elevation","margin","textAlign","Grid","container","spacing","item","xs","md","mt","App","db","runewords","useEffect","forceCheck","Container","justifyContent","runewordIndex","itemCategoryMatch","length","category","runeMatch","rune","minLevel","maxLevel","levelMatch","noFilters","px","height","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","light","dark","typography","fontFamily","fontSize","h6","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.6664fad5.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardContent, Typography, List, ListItem, ListItemText } from '@mui/material';\nimport { alpha } from '@mui/material';\n\nconst ItemCard = ({ runeword }: { runeword: Runeword }) => {\n  const { name, level, items, runes, stats } = runeword;\n\n  return (\n    <Card variant=\"outlined\" sx={{ bgcolor: alpha('#000000', 0.7), textAlignLast: 'center' }}>\n      <CardContent>\n        <Typography variant=\"h6\" sx={{ color: '#948064' }}>\n          {name}\n        </Typography>\n        <Typography color=\"common.white\">Character level required: {level}</Typography>\n        <Typography color=\"common.white\">{items.join(', ')}</Typography>\n        <Typography color=\"common.white\">{runes.join(', ')}</Typography>\n\n        <List dense>\n          {stats.map((stat, statIndex) => {\n            const {\n              valueMin,\n              valueMax,\n              percent,\n              modifier,\n              spell,\n              spellLevel,\n              spellCharges,\n              skill,\n              skillLevelMin,\n              skillLevelMax,\n              skillBoost,\n              skillBoostValueMin,\n              skillBoostValueMax,\n              note\n            } = stat;\n\n            let statString = '';\n\n            if (modifier && valueMin) {\n              statString +=\n                valueMin === valueMax ? `${valueMin}` : `${valueMin} - ${valueMax}`;\n              statString += percent ? '%' : '';\n              statString += ` ${modifier}`;\n            }\n\n            if (modifier && !valueMin) {\n              statString += ` ${modifier}`;\n            }\n\n            if (spell) {\n              statString += `Level ${spellLevel} ${spell} (${spellCharges} charges)`;\n            }\n\n            if (skill) {\n              statString += 'Level';\n              statString +=\n                skillLevelMin === skillLevelMax\n                  ? ` ${skillLevelMin}`\n                  : ` ${skillLevelMin} - ${skillLevelMax}`;\n              statString += ` ${skill} when equipped`;\n            }\n\n            if (skillBoost) {\n              statString +=\n                skillBoostValueMin === skillBoostValueMax\n                  ? `+${skillBoostValueMin} to`\n                  : `+${skillBoostValueMin} - ${skillBoostValueMax} to`;\n              statString += ` ${skillBoost}`;\n            }\n\n            statString += note && ` (${note})`;\n\n            return (\n              <ListItem sx={{ padding: 0 }} key={`${Math.random()}-stat-${statIndex}`}>\n                <ListItemText\n                  sx={{\n                    color: '#5050ac',\n                    marginTop: 0,\n                    marginBottom: 0\n                  }}\n                >\n                  <span style={{ fontWeight: 900 }}>{statString}</span>\n                </ListItemText>\n              </ListItem>\n            );\n          })}\n        </List>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ItemCard;\n","import { Dispatch, SetStateAction } from 'react';\nimport {\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n  Checkbox,\n  ListItemText\n} from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\ntype FilterProps = {\n  selected: string[];\n  selectedSetter: Dispatch<SetStateAction<string[]>>;\n  label: string;\n  choices: string[];\n};\n\nconst MultiselectFilter = ({ selected, selectedSetter, label, choices }: FilterProps) => {\n  const theme = useTheme();\n  const filterID = label.toLowerCase().replace(' ', '-');\n\n  return (\n    <FormControl sx={{ m: 1 }} fullWidth>\n      <InputLabel\n        id={`${filterID}-label`}\n        sx={{ backgroundColor: theme.palette.secondary.main }}\n      >\n        {label}\n      </InputLabel>\n      <Select\n        labelId={`${filterID}-label`}\n        id={filterID}\n        multiple\n        value={selected}\n        onChange={({ target: { value } }) => {\n          selectedSetter(\n            // On autofill we get a stringified value.\n            typeof value === 'string' ? value.split(',') : value\n          );\n        }}\n        // input={<OutlinedInput label=\"Tag\" />}\n        renderValue={(selected) => selected.join(', ')}\n      >\n        {choices.map((choice) => (\n          <MenuItem key={choice} value={choice}>\n            <Checkbox checked={selected.includes(choice)} />\n            <ListItemText primary={choice} />\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nexport default MultiselectFilter;\n","import { Dispatch, SetStateAction, useState, useEffect } from 'react';\nimport { Box, Slider, Typography } from '@mui/material';\n\ntype SliderFilterProps = {\n  selected: number[];\n  selectedSetter: Dispatch<SetStateAction<number[]>>;\n  label: string;\n  range: number[];\n};\n\nconst SliderFilter = ({ selected, selectedSetter, label, range }: SliderFilterProps) => {\n  const [value, setValue] = useState(selected);\n  const [min, max] = range;\n\n  return (\n    <Box>\n      <Slider\n        getAriaLabel={() => 'Character Level'}\n        value={value}\n        min={min}\n        max={max}\n        onChange={(event, newValue) => {\n          Array.isArray(newValue) ? setValue(newValue) : setValue([newValue, newValue]);\n        }}\n        onChangeCommitted={() => selectedSetter(value)}\n        valueLabelDisplay=\"on\"\n        getAriaValueText={(currentValue) => `${currentValue}`}\n      />\n      <Typography>Character Level Range</Typography>\n    </Box>\n  );\n};\n\nexport default SliderFilter;\n","const ITEM_CATEGORIES: string[] = [\n  'All Weapons',\n  'Axes',\n  'Body Armor',\n  'Bows',\n  'Claws',\n  'Clubs',\n  'Hammers',\n  'Head Armor',\n  'Maces',\n  'Melee Weapons',\n  'Paladin Shields',\n  'Polearms',\n  'Scepters',\n  'Shields',\n  'Staves',\n  'Swords',\n  'Wands'\n];\n\nconst RUNES_AVAILABLE: string[] = [\n  'Amn',\n  'Ber',\n  'Cham',\n  'Dol',\n  'El',\n  'Eld',\n  'Eth',\n  'Fal',\n  'Gul',\n  'Hel',\n  'Io',\n  'Ist',\n  'Ith',\n  'Jah',\n  'Ko',\n  'Lem',\n  'Lo',\n  'Lum',\n  'Mal',\n  'Nef',\n  'Ohm',\n  'Ort',\n  'Pul',\n  'Ral',\n  'Shael',\n  'Sol',\n  'Sur',\n  'Tal',\n  'Thul',\n  'Tir',\n  'Um',\n  'Vex',\n  'Zod'\n];\n\nexport { ITEM_CATEGORIES, RUNES_AVAILABLE };\n","import { Dispatch, SetStateAction } from 'react';\nimport { Paper, Typography, Grid } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\nimport MultiselectFilter from './MultiselectFilter';\nimport SliderFilter from './SliderFilter';\n\nimport { ITEM_CATEGORIES, RUNES_AVAILABLE } from '../../constants';\n\ntype FiltersProps = {\n  selectedItemCategories: string[];\n  setSelectedItemCategories: Dispatch<SetStateAction<string[]>>;\n  selectedRunesAvailable: string[];\n  setSelectedRunesAvailable: Dispatch<SetStateAction<string[]>>;\n  selectedLevelRange: number[];\n  setSelectedLevelRange: Dispatch<SetStateAction<number[]>>;\n};\n\nconst Filters = ({\n  selectedItemCategories,\n  setSelectedItemCategories,\n  selectedRunesAvailable,\n  setSelectedRunesAvailable,\n  selectedLevelRange,\n  setSelectedLevelRange\n}: FiltersProps) => {\n  const theme = useTheme();\n\n  return (\n    <Paper\n      elevation={3}\n      sx={{\n        bgcolor: theme.palette.secondary.main,\n        margin: 4,\n        padding: 4,\n        textAlign: 'center'\n      }}\n    >\n      <Typography variant=\"h3\">Filters</Typography>\n      <Grid container spacing={2}>\n        <Grid item xs={12} md={4}>\n          <MultiselectFilter\n            label=\"Item Types\"\n            choices={ITEM_CATEGORIES}\n            selected={selectedItemCategories}\n            selectedSetter={setSelectedItemCategories}\n          />\n        </Grid>\n        <Grid item xs={12} md={4}>\n          <MultiselectFilter\n            label=\"Runes Available\"\n            choices={RUNES_AVAILABLE}\n            selected={selectedRunesAvailable}\n            selectedSetter={setSelectedRunesAvailable}\n          />\n        </Grid>\n        <Grid item xs={12} md={12} mt={4}>\n          <SliderFilter\n            label=\"Character Level\"\n            range={[1, 99]}\n            selected={selectedLevelRange}\n            selectedSetter={setSelectedLevelRange}\n          />\n        </Grid>\n      </Grid>\n    </Paper>\n  );\n};\n\nexport default Filters;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from '@mui/material';\nimport LazyLoad, { forceCheck } from 'react-lazyload';\nimport { ItemCard, Filters } from './components';\nimport './App.css';\nimport db from './db.json';\n\n// const runesAvailable: string[] = [];\n// db.forEach((runeword) => {\n//   const { runes } = runeword;\n\n//   runes.forEach((rune: string) => {\n//     if (!runesAvailable.includes(rune)) runesAvailable.push(rune);\n//   });\n\n//   runesAvailable.sort();\n// });\n\nconst App = () => {\n  const [runewords] = useState(db);\n  const [selectedItemCategories, setSelectedItemCategories] = useState<string[]>([]);\n  const [selectedRunesAvailable, setSelectedRunesAvailable] = useState<string[]>([]);\n  const [selectedLevelRange, setSelectedLevelRange] = useState<number[]>([1, 99]);\n\n  useEffect(() => {\n    forceCheck();\n  }, [selectedItemCategories, selectedRunesAvailable, selectedLevelRange]);\n\n  return (\n    <Container>\n      <Filters\n        selectedItemCategories={selectedItemCategories}\n        setSelectedItemCategories={setSelectedItemCategories}\n        selectedRunesAvailable={selectedRunesAvailable}\n        setSelectedRunesAvailable={setSelectedRunesAvailable}\n        selectedLevelRange={selectedLevelRange}\n        setSelectedLevelRange={setSelectedLevelRange}\n      />\n      <Grid container spacing={2} justifyContent=\"center\">\n        {/* eslint-disable-next-line array-callback-return */}\n        {runewords.map((runeword: Runeword, runewordIndex: number) => {\n          let itemCategoryMatch: boolean = false;\n          // If user has selected any item category filters\n          if (selectedItemCategories.length) {\n            for (const category of selectedItemCategories) {\n              if (runeword.items.includes(category)) {\n                itemCategoryMatch = true;\n                break;\n              }\n            }\n          } else {\n            // No filters selected\n            itemCategoryMatch = true;\n          }\n\n          let runeMatch: boolean = false;\n          // If user has selected any rune filters\n          if (selectedRunesAvailable.length) {\n            for (const rune of selectedRunesAvailable) {\n              if (runeword.runes.includes(rune)) {\n                runeMatch = true;\n                break;\n              }\n            }\n          } else {\n            // No filters selected\n            runeMatch = true;\n          }\n\n          const [minLevel, maxLevel] = selectedLevelRange;\n          const levelMatch = runeword.level <= maxLevel && runeword.level >= minLevel;\n\n          const noFilters: boolean =\n            !selectedItemCategories.length &&\n            !selectedRunesAvailable.length &&\n            minLevel === 1 &&\n            maxLevel === 99;\n          const filterMatch: boolean = itemCategoryMatch && runeMatch && levelMatch;\n\n          if (filterMatch || noFilters) {\n            return (\n              <Grid item xs={8} px={2} key={`runeword-${runewordIndex}`}>\n                <LazyLoad height=\"100%\" placeholder={<p>Scroll down!</p>}>\n                  <ItemCard runeword={runeword} />\n                </LazyLoad>\n              </Grid>\n            );\n          }\n        })}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\n/*\n  --main-primary: #92140c;\n  --main-primary-light: #c94a34;\n  --main-primary-dark: #5e0000;\n*/\n\n/*\n  --main-primary: #2a0a00;\n  --main-primary-light: #54312c;\n*/\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#92140c',\n      light: '#c94a34',\n      dark: '#5e0000'\n    },\n    secondary: {\n      main: '#c1b4ae',\n      light: '#f4e6e0',\n      dark: '#91847f'\n    }\n  },\n  typography: {\n    fontFamily: ['AvQest', 'serif'].join(','),\n    fontSize: 18,\n    h6: {\n      fontWeight: 900\n    }\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}