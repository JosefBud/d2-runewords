{"version":3,"sources":["components/ItemCard/index.tsx","components/Filters/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ItemCard","runeword","name","level","items","runes","stats","Card","variant","sx","bgcolor","alpha","textAlignLast","CardContent","Typography","color","join","List","dense","map","stat","statIndex","valueMin","valueMax","percent","modifier","spell","spellLevel","spellCharges","skill","skillLevelMin","skillLevelMax","skillBoost","skillBoostValueMin","skillBoostValueMax","note","statString","ListItem","padding","ListItemText","marginTop","marginBottom","style","fontWeight","Math","random","ITEM_CATEGORIES","Filters","selectedItemCategories","setSelectedItemCategories","theme","useTheme","Paper","elevation","palette","secondary","main","margin","justifyContent","FormControl","m","width","InputLabel","id","Select","labelId","multiple","value","onChange","target","split","renderValue","selected","itemCategory","MenuItem","Checkbox","checked","includes","primary","App","useState","db","runewords","setRunewords","isAmazon","useEffect","filteredRunewords","filter","Container","Grid","container","spacing","runewordIndex","filterMatch","category","length","item","xs","px","height","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","light","dark","typography","fontFamily","fontSize","h6","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.58923832.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n  ListItemText\n} from '@mui/material';\nimport { alpha } from '@mui/material';\n\ntype Stat = {\n  valueMin: number;\n  valueMax: number;\n  percent: boolean;\n  modifier: string;\n  spell: string;\n  spellLevel: number;\n  spellCharges: number;\n  skill: string;\n  skillLevelMin: number;\n  skillLevelMax: number;\n  skillBoost: string;\n  skillBoostValueMin: number;\n  skillBoostValueMax: number;\n  note: string;\n};\n\ntype Runeword = {\n  name: string;\n  level: number;\n  items: string[];\n  runes: string[];\n  stats: Stat[];\n};\n\nconst ItemCard = ({ runeword }: { runeword: Runeword }) => {\n  const { name, level, items, runes, stats } = runeword;\n\n  return (\n    <Card variant=\"outlined\" sx={{ bgcolor: alpha('#000000', 0.7), textAlignLast: 'center' }}>\n      <CardContent>\n        <Typography variant=\"h6\" sx={{ color: '#948064' }}>\n          {name}\n        </Typography>\n        <Typography color=\"common.white\">Character level required: {level}</Typography>\n        <Typography color=\"common.white\">{items.join(', ')}</Typography>\n        <Typography color=\"common.white\">{runes.join(', ')}</Typography>\n\n        <List dense>\n          {stats.map((stat, statIndex) => {\n            const {\n              valueMin,\n              valueMax,\n              percent,\n              modifier,\n              spell,\n              spellLevel,\n              spellCharges,\n              skill,\n              skillLevelMin,\n              skillLevelMax,\n              skillBoost,\n              skillBoostValueMin,\n              skillBoostValueMax,\n              note\n            } = stat;\n\n            let statString = '';\n\n            if (modifier && valueMin) {\n              statString +=\n                valueMin === valueMax ? `${valueMin}` : `${valueMin} - ${valueMax}`;\n              statString += percent ? '%' : '';\n              statString += ` ${modifier}`;\n            }\n\n            if (modifier && !valueMin) {\n              statString += ` ${modifier}`;\n            }\n\n            if (spell) {\n              statString += `Level ${spellLevel} ${spell} (${spellCharges} charges)`;\n            }\n\n            if (skill) {\n              statString += 'Level';\n              statString +=\n                skillLevelMin === skillLevelMax\n                  ? ` ${skillLevelMin}`\n                  : ` ${skillLevelMin} - ${skillLevelMax}`;\n              statString += ` ${skill} when equipped`;\n            }\n\n            if (skillBoost) {\n              statString +=\n                skillBoostValueMin === skillBoostValueMax\n                  ? `+${skillBoostValueMin} to`\n                  : `+${skillBoostValueMin} - ${skillBoostValueMax} to`;\n              statString += ` ${skillBoost}`;\n            }\n\n            statString += note && ` (${note})`;\n\n            return (\n              <ListItem sx={{ padding: 0 }} key={`${Math.random()}-stat-${statIndex}`}>\n                <ListItemText\n                  sx={{\n                    color: '#5050ac',\n                    marginTop: 0,\n                    marginBottom: 0\n                  }}\n                >\n                  <span style={{ fontWeight: 900 }}>{statString}</span>\n                </ListItemText>\n              </ListItem>\n            );\n          })}\n        </List>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ItemCard;\n","import { Dispatch, SetStateAction, useState } from 'react';\nimport {\n  Box,\n  Paper,\n  FormControl,\n  InputLabel,\n  Select,\n  OutlinedInput,\n  MenuItem,\n  Checkbox,\n  ListItemText,\n  Typography\n} from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\nconst ITEM_CATEGORIES: string[] = [\n  'All Weapons',\n  'Axes',\n  'Body Armor',\n  'Bows',\n  'Claws',\n  'Clubs',\n  'Hammers',\n  'Head Armor',\n  'Maces',\n  'Melee Weapons',\n  'Paladin Shields',\n  'Polearms',\n  'Scepters',\n  'Shields',\n  'Staves',\n  'Swords',\n  'Wands'\n];\n\ntype FiltersProps = {\n  selectedItemCategories: string[];\n  setSelectedItemCategories: Dispatch<SetStateAction<string[]>>;\n};\n\nconst Filters = ({ selectedItemCategories, setSelectedItemCategories }: FiltersProps) => {\n  const theme = useTheme();\n\n  return (\n    <Paper\n      elevation={3}\n      sx={{\n        bgcolor: theme.palette.secondary.main,\n        margin: 4,\n        padding: 4,\n        justifyContent: 'center'\n      }}\n    >\n      <Typography variant=\"h3\">Filters</Typography>\n      <FormControl sx={{ m: 1, width: 300 }}>\n        <InputLabel id=\"item-types-label\">Item Types</InputLabel>\n        <Select\n          labelId=\"item-types-label\"\n          id=\"item-types\"\n          multiple\n          value={selectedItemCategories}\n          onChange={({ target: { value } }) => {\n            setSelectedItemCategories(\n              // On autofill we get a stringified value.\n              typeof value === 'string' ? value.split(',') : value\n            );\n          }}\n          // input={<OutlinedInput label=\"Tag\" />}\n          renderValue={(selected) => selected.join(', ')}\n        >\n          {ITEM_CATEGORIES.map((itemCategory) => (\n            <MenuItem key={itemCategory} value={itemCategory}>\n              <Checkbox checked={selectedItemCategories.includes(itemCategory)} />\n              <ListItemText primary={itemCategory} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </Paper>\n  );\n};\n\nexport default Filters;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Grid } from '@mui/material';\nimport LazyLoad from 'react-lazyload';\nimport { ItemCard, Filters } from './components';\nimport './App.css';\nimport db from './db.json';\n\n// db.forEach((runeword) => {\n//   const { items } = runeword;\n\n//   items.forEach((item: string) => {\n//     if (!itemCategories.includes(item)) itemCategories.push(item);\n//   });\n\n//   itemCategories.sort();\n// });\n\nconst App = () => {\n  const [runewords, setRunewords] = useState(db);\n  const [selectedItemCategories, setSelectedItemCategories] = useState<string[]>([]);\n  const [isAmazon, setIsAmazon] = useState(false);\n\n  useEffect(() => {\n    if (isAmazon) {\n      const filteredRunewords = runewords.filter((runeword) => {\n        const { items } = runeword;\n        return items.includes('Bows');\n      });\n      return setRunewords(filteredRunewords);\n    }\n\n    setRunewords(db);\n  }, [isAmazon]);\n\n  return (\n    <Container>\n      <Filters\n        selectedItemCategories={selectedItemCategories}\n        setSelectedItemCategories={setSelectedItemCategories}\n      />\n      <Grid container spacing={2} justifyContent=\"center\">\n        {/* eslint-disable-next-line array-callback-return */}\n        {runewords.map((runeword, runewordIndex) => {\n          let filterMatch = false;\n\n          for (const category of selectedItemCategories) {\n            if (runeword.items.includes(category)) {\n              filterMatch = true;\n              break;\n            }\n          }\n\n          if (filterMatch || selectedItemCategories.length === 0) {\n            return (\n              <Grid item xs={8} px={2} key={`runeword-${runewordIndex}`}>\n                <LazyLoad height={200} placeholder={<p>loading</p>}>\n                  <ItemCard runeword={runeword} />\n                </LazyLoad>\n              </Grid>\n            );\n          }\n        })}\n      </Grid>\n    </Container>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\n/*\n  --main-primary: #92140c;\n  --main-primary-light: #c94a34;\n  --main-primary-dark: #5e0000;\n*/\n\n/*\n  --main-primary: #2a0a00;\n  --main-primary-light: #54312c;\n*/\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: '#92140c',\n      light: '#c94a34',\n      dark: '#5e0000'\n    },\n    secondary: {\n      main: '#c1b4ae',\n      light: '#f4e6e0',\n      dark: '#91847f'\n    }\n  },\n  typography: {\n    fontFamily: ['AvQest', 'serif'].join(','),\n    fontSize: 18,\n    h6: {\n      fontWeight: 900\n    }\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}