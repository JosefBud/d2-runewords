{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","db","runewords","setRunewords","isAmazon","setIsAmazon","useEffect","filteredRunewords","filter","runeword","items","includes","Container","Box","m","type","checked","onChange","Grid","container","spacing","map","runewordIndex","name","level","runes","stats","item","xs","px","Card","variant","sx","bgcolor","alpha","CardContent","Typography","color","join","List","dense","stat","statIndex","valueMin","valueMax","percent","modifier","spell","spellLevel","spellCharges","skill","skillLevelMin","skillLevelMax","skillBoost","skillBoostValueMin","skillBoostValueMax","note","statString","ListItem","padding","ListItemText","marginTop","marginBottom","style","fontWeight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","typography","fontFamily","fontSize","h6","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.60c12062.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  Box,\n  Grid,\n  Card,\n  CardContent,\n  Typography,\n  List,\n  ListItem,\n  ListItemText\n} from '@mui/material';\nimport { alpha } from '@mui/material';\nimport './App.css';\nimport db from './db.json';\n\nfunction App() {\n  const [runewords, setRunewords] = useState(db);\n  const [isAmazon, setIsAmazon] = useState(false);\n\n  useEffect(() => {\n    if (isAmazon) {\n      const filteredRunewords = runewords.filter((runeword) => {\n        const { items } = runeword;\n        return items.includes('Bows');\n      });\n      return setRunewords(filteredRunewords);\n    }\n\n    setRunewords(db);\n  }, [isAmazon]);\n\n  return (\n    <Container>\n      <Box m={4}>\n        <input type=\"checkbox\" checked={isAmazon} onChange={() => setIsAmazon(!isAmazon)} />\n        <span>Bows & Crossbows</span>\n      </Box>\n      <Grid container spacing={2}>\n        {runewords.map((runeword, runewordIndex) => {\n          const { name, level, items, runes, stats } = runeword;\n          return (\n            <Grid item xs={12} px={2} key={`runeword-${runewordIndex}`}>\n              <Card variant=\"outlined\" sx={{ bgcolor: alpha('#000000', 0.7) }}>\n                <CardContent>\n                  <Typography variant=\"h6\" sx={{ color: '#948064' }}>\n                    {name}\n                  </Typography>\n                  <Typography color=\"common.white\">\n                    Character level required: {level}\n                  </Typography>\n                  <Typography color=\"common.white\">{items.join(', ')}</Typography>\n                  <Typography color=\"common.white\">{runes.join(', ')}</Typography>\n\n                  <List dense>\n                    {stats.map((stat, statIndex) => {\n                      const {\n                        valueMin,\n                        valueMax,\n                        percent,\n                        modifier,\n                        spell,\n                        spellLevel,\n                        spellCharges,\n                        skill,\n                        skillLevelMin,\n                        skillLevelMax,\n                        skillBoost,\n                        skillBoostValueMin,\n                        skillBoostValueMax,\n                        note\n                      } = stat;\n\n                      let statString = '';\n\n                      if (modifier && valueMin) {\n                        statString +=\n                          valueMin === valueMax ? `${valueMin}` : `${valueMin} - ${valueMax}`;\n                        statString += percent ? '%' : '';\n                        statString += ` ${modifier}`;\n                      }\n\n                      if (modifier && !valueMin) {\n                        statString += ` ${modifier}`;\n                      }\n\n                      if (spell) {\n                        statString += `Level ${spellLevel} ${spell} (${spellCharges} charges)`;\n                      }\n\n                      if (skill) {\n                        statString += 'Level';\n                        statString +=\n                          skillLevelMin === skillLevelMax\n                            ? ` ${skillLevelMin}`\n                            : ` ${skillLevelMin} - ${skillLevelMax}`;\n                        statString += ` ${skill} when equipped`;\n                      }\n\n                      if (skillBoost) {\n                        statString +=\n                          skillBoostValueMin === skillBoostValueMax\n                            ? `+${skillBoostValueMin} to`\n                            : `+${skillBoostValueMin} - ${skillBoostValueMax} to`;\n                        statString += ` ${skillBoost}`;\n                      }\n\n                      statString += note && ` (${note})`;\n\n                      return (\n                        <ListItem\n                          sx={{ padding: 0 }}\n                          key={`runeword-${runewordIndex}-stat-${statIndex}`}\n                        >\n                          <ListItemText\n                            sx={{\n                              color: '#5050ac',\n                              marginTop: 0,\n                              marginBottom: 0\n                            }}\n                          >\n                            <span style={{ fontWeight: 900 }}>{statString}</span>\n                          </ListItemText>\n                        </ListItem>\n                      );\n                    })}\n                  </List>\n                </CardContent>\n              </Card>\n            </Grid>\n          );\n        })}\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\n\nconst theme = createTheme({\n  typography: {\n    fontFamily: ['AvQest', 'serif'].join(','),\n    fontSize: 18,\n    h6: {\n      fontWeight: 900\n    }\n  }\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}